import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from utils.db_helpers import get_db_connection
from utils.logger import logger
import stripe
from aiogram.fsm.context import FSMContext
from utils.subscription_checker import require_subscription
from openpyxl import load_workbook, Workbook


stripe.api_key = os.getenv("STRIPE_API_KEY")
user_waiting_for_data = {}
dp = Dispatcher()
@require_subscription
async def add_to_cart(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    product_id = int(callback_query.data.split("_")[2])
    user_id = callback_query.from_user.id

    connection = await get_db_connection()
    cursor = connection.cursor()

    cursor.execute(
        """
        INSERT INTO cart (user_id, product_id, quantity)
        VALUES (%s, %s, 1)
        ON CONFLICT (user_id, product_id)
        DO UPDATE SET quantity = cart.quantity + 1;
        """,
        (user_id, product_id)
    )
    connection.commit()
    connection.close()

    await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí")


@require_subscription
async def view_cart(message: Message, is_edit: bool = False, cart_items=None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id

    # –ï—Å–ª–∏ cart_items –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
    if cart_items is None:
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute(
            """
            SELECT p.id, p.name, c.quantity, p.price, (p.price * c.quantity) AS total
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = %s;
            """,
            (user_id,)
        )
        cart_items = cursor.fetchall()
        connection.close()

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not cart_items:
        cart_text = "**–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n–û–±—â–∞—è —Å—É–º–º–∞: 0 ‚ÇΩ"
        keyboard = [[InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõí", callback_data="cart_order")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        if is_edit:
            try:
                await message.edit_text(text=cart_text, parse_mode="Markdown", reply_markup=reply_markup)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        else:
            await message.answer(text=cart_text, parse_mode="Markdown", reply_markup=reply_markup)
        return

    # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    cart_text = "**–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
    total_sum = 0
    keyboard = []

    for item in cart_items:
        product_id, name, quantity, price, total = item
        cart_text += (
            f"{name}\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ\n\n"
        )
        total_sum += total

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        keyboard.append([
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_decrease_{product_id}"),
            InlineKeyboardButton(text=str(quantity), callback_data=f"noop_{product_id}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart_increase_{product_id}")
        ])

    # –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    keyboard.append([InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõí", callback_data=f"cart_order_{total_sum}")])

    cart_text += f"**–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} ‚ÇΩ**"
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if is_edit:
        try:
            await message.edit_text(text=cart_text, parse_mode="Markdown", reply_markup=reply_markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    else:
        await message.answer(text=cart_text, parse_mode="Markdown", reply_markup=reply_markup)








def write_to_excel(user_id, delivery_name, delivery_address, delivery_phone, total_sum):
    file_name = "orders.xlsx"
    logger.info("–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Excel")
    try:
        workbook = load_workbook(file_name)
        sheet = workbook.active
    except FileNotFoundError:
        workbook = Workbook()
        sheet = workbook.active
        sheet.append(["User ID", "–ò–º—è", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞"])

    sheet.append([user_id, delivery_name, delivery_address, delivery_phone, total_sum])
    workbook.save(file_name)
    workbook.close()


async def handle_delivery_data(callback_query: CallbackQuery, total_sum):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    if total_sum == 0:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.")
        return

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "1. –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n"
        "2. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "3. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    user_waiting_for_data[user_id] = total_sum


async def process_user_input(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_waiting_for_data:
        delivery_data = message.text.split("\n")
        if len(delivery_data) < 3:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "1. –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n"
                "2. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                "3. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        total_sum = user_waiting_for_data.pop(user_id)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel (–∑–∞–º–µ–Ω–∏—Ç–µ write_to_excel –Ω–∞ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é)
        write_to_excel(user_id, delivery_data[0], delivery_data[1], delivery_data[2], total_sum)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–ª–∞—Ç—ë–∂.")

        # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ initiate_payment –Ω–∞ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é)
        await initiate_payment(message)



async def initiate_payment(callback_query: CallbackQuery):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stripe."""
    user_id = callback_query.from_user.id
    connection = get_db_connection()
    cursor = connection.cursor()

    cursor.execute(
        """
        SELECT p.name, c.quantity, p.price, (p.price * c.quantity) AS total
        FROM cart c
        JOIN products p ON c.product_id = p.id
        WHERE c.user_id = %s;
        """,
        (user_id,)
    )
    cart_items = cursor.fetchall()
    connection.close()

    if not cart_items:
        await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total_sum = sum(item[3] for item in cart_items)

    try:
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'rub',
                    'product_data': {
                        'name': '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'
                    },
                    'unit_amount': int(total_sum * 100),
                },
                'quantity': 1,
            }],
            mode='payment',
            success_url='https://example.com/success',
            cancel_url='https://example.com/cancel',
        )
        await callback_query.answer(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=session.url)
            ]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")


async def handle_cart_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã."""
    await callback_query.answer()
    user_id = callback_query.from_user.id
    data = callback_query.data.split("_")

    action = data[1]  # "increase" –∏–ª–∏ "decrease"
    if action == "order":
        await handle_delivery_data(callback_query, data[2])
        return
    product_id = int(data[2])  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞

    connection = get_db_connection()
    cursor = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
    cursor.execute("""
        SELECT quantity 
        FROM cart
        WHERE user_id = %s AND product_id = %s;
    """, (user_id, product_id))
    product_row = cursor.fetchone()

    if not product_row:
        await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        connection.close()
        return

    current_quantity = product_row[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ
    if action == "increase":
        cursor.execute("""
            UPDATE cart
            SET quantity = quantity + 1
            WHERE user_id = %s AND product_id = %s;
        """, (user_id, product_id))
    elif action == "decrease":
        if current_quantity > 1:
            cursor.execute("""
                UPDATE cart
                SET quantity = quantity - 1
                WHERE user_id = %s AND product_id = %s;
            """, (user_id, product_id))
        else:
            cursor.execute("""
                DELETE FROM cart
                WHERE user_id = %s AND product_id = %s;
            """, (user_id, product_id))

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    connection.commit()

    # **–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**
    cursor.execute("""
        SELECT p.id, p.name, c.quantity, p.price, (p.price * c.quantity) AS total
        FROM cart c
        JOIN products p ON c.product_id = p.id
        WHERE c.user_id = %s;
    """, (user_id,))
    updated_cart_items = cursor.fetchall()
    connection.close()

    # **–í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**
    await view_cart(callback_query.message, is_edit=True, cart_items=updated_cart_items)



