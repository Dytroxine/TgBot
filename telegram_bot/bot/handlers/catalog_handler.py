import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from utils.db_helpers import get_db_connection
from utils.logger import logger
from utils.subscription_checker import require_subscription


@require_subscription
async def start_catalog(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    connection = get_db_connection()
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id, name FROM categories;")
    categories = cursor.fetchall()
    connection.close()

    if not categories:
        await callback_query.message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=category[1], callback_data=f"category_{category[0]}")]
            for category in categories
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)





async def handle_callback(callback: CallbackQuery):
    global user_data
    if 'user_data' not in globals():
        user_data = {}
    await callback.answer()
    data = callback.data.split("_")
    product_id = int(data[1])
    if f"product_{product_id}_quantity" not in user_data:
        user_data[f"product_{product_id}_quantity"] = 1

    if data[0] == "category":
        category_id = int(data[1])
        page = int(data[2]) if len(data) > 2 else 1
        items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        connection = get_db_connection()  # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        cursor = connection.cursor()
        cursor.execute("SELECT id, name FROM subcategories WHERE category_id = %s;", (category_id,))
        subcategories = cursor.fetchall()
        cursor.close()
        connection.close()

        if not subcategories:
            await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_items = len(subcategories)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        current_page_items = subcategories[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = [
            [InlineKeyboardButton(text=subcategory[1], callback_data=f"subcategory_{subcategory[0]}")]
            for subcategory in current_page_items
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if page > 1:
            keyboard.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}_{page - 1}")])
        if page < total_pages:
            keyboard.append([InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"category_{category_id}_{page + 1}")])

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}:", reply_markup=reply_markup)

    if data[0] == "subcategory":
        subcategory_id = int(data[1])
        page = int(data[2]) if len(data) > 2 else 1
        items_per_page = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, description, price, photo_url FROM products WHERE subcategory_id = %s;",
                       (subcategory_id,))
        products = cursor.fetchall()
        connection.close()

        if not products:
            await query.edit_message_text("–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        total_items = len(products)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        current_page_items = products[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        user_data = {}
        for product in current_page_items:
            product_id, name, description, price, photo_url = product
            user_data[f"product_{product_id}_quantity"] = user_data.get(f"product_{product_id}_quantity", 1)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            keyboard.append([
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product_id}"),
                InlineKeyboardButton(text=f"{user_data[f'product_{product_id}_quantity']}",
                                     callback_data=f"quantity_{product_id}"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product_id}"),
            ])

            keyboard.append([
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"addtocart_{product_id}")
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await callback.message.answer_photo(
                photo=photo_url,
                caption=(
                    f"**{name}**\n"
                    f"{description}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                ),
                parse_mode="Markdown"
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"subcategory_{subcategory_id}_{page - 1}"))
        if page < total_pages:
            navigation_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"subcategory_{subcategory_id}_{page + 1}"))
        if navigation_buttons:
            keyboard.append(navigation_buttons)

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await callback.message.answer(text="–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=reply_markup)
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    elif data[0] == "increase":
        product_id = int(data[1])
        if f"product_{product_id}_quantity" not in user_data:
            user_data[f"product_{product_id}_quantity"] = 1  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        user_data[f"product_{product_id}_quantity"] += 1
        quantity = user_data[f"product_{product_id}_quantity"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        updated_keyboard = []
        for row in callback.message.reply_markup.inline_keyboard:
            updated_row = []
            for button in row:
                if button.callback_data == f"quantity_{product_id}":
                    updated_row.append(InlineKeyboardButton(text=str(quantity), callback_data=button.callback_data))
                else:
                    updated_row.append(button)
            updated_keyboard.append(updated_row)

        reply_markup = InlineKeyboardMarkup(inline_keyboard=updated_keyboard)
        await callback.message.edit_reply_markup(reply_markup=reply_markup)

    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    elif data[0] == "decrease":
        product_id = int(data[1])
        current_quantity = user_data.get(f"product_{product_id}_quantity", 1)
        if current_quantity > 1:
            user_data[f"product_{product_id}_quantity"] = current_quantity - 1
            quantity = user_data[f"product_{product_id}_quantity"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            updated_keyboard = []
            for row in callback.message.reply_markup.inline_keyboard:
                updated_row = []
                for button in row:
                    if button.callback_data == f"quantity_{product_id}":
                        updated_row.append(InlineKeyboardButton(text=str(quantity), callback_data=button.callback_data))
                    else:
                        updated_row.append(button)
                updated_keyboard.append(updated_row)

            reply_markup = InlineKeyboardMarkup(inline_keyboard=updated_keyboard)
            await callback.message.edit_reply_markup(reply_markup=reply_markup)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif data[0] == "addtocart":
        product_id = int(data[1])
        quantity = user_data.get(f"product_{product_id}_quantity", 1)
        user_id = callback.from_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = get_db_connection()
        cursor = connection.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute(
            """
            INSERT INTO cart (user_id, product_id, quantity)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, product_id) DO UPDATE
            SET quantity = cart.quantity + EXCLUDED.quantity, updated_at = NOW();
            """,
            (user_id, product_id, quantity)
        )

        connection.commit()
        connection.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ", show_alert=True)