from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from utils.db_helpers import get_db_connection
from utils.logger import logger
from utils.subscription_checker import require_subscription


@require_subscription
async def start_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    connection = get_db_connection()
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT id, name FROM categories;")
    categories = cursor.fetchall()
    connection.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if update.message:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.callback_query:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query
            await update.callback_query.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = [
        [InlineKeyboardButton(category[1], callback_data=f"category_{category[0]}")]
        for category in categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if update.message:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    elif update.callback_query:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if data[0] == "category":
        category_id = int(data[1])
        page = int(data[2]) if len(data) > 2 else 1
        items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT id, name FROM subcategories WHERE category_id = %s;", (category_id,))
        subcategories = cursor.fetchall()
        connection.close()

        if not subcategories:
            await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_items = len(subcategories)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        current_page_items = subcategories[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = [
            [InlineKeyboardButton(subcategory[1], callback_data=f"subcategory_{subcategory[0]}")]
            for subcategory in current_page_items
        ]

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}_{page - 1}"))
        if page < total_pages:
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"category_{category_id}_{page + 1}"))
        if navigation_buttons:
            keyboard.append(navigation_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

    if data[0] == "subcategory":
        subcategory_id = int(data[1])
        page = int(data[2]) if len(data) > 2 else 1
        items_per_page = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, description, price, photo_url FROM products WHERE subcategory_id = %s;",
                       (subcategory_id,))
        products = cursor.fetchall()
        connection.close()

        if not products:
            await query.edit_message_text("–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        total_items = len(products)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        current_page_items = products[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []

        for product in current_page_items:
            product_id, name, description, price, photo_url = product

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            context.user_data[f"product_{product_id}_quantity"] = context.user_data.get(
                f"product_{product_id}_quantity", 1)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            keyboard.append([
                InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{product_id}"),
                InlineKeyboardButton(f"{context.user_data[f'product_{product_id}_quantity']}", callback_data=f"quantity_{product_id}"),
                InlineKeyboardButton("‚ûï", callback_data=f"increase_{product_id}"),
            ])

            keyboard.append([
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"addtocart_{product_id}")
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_url,
                caption=(
                    f"**{name}**\n"
                    f"{description}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                ),
                parse_mode="Markdown"
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"subcategory_{subcategory_id}_{page - 1}"))
        if page < total_pages:
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"subcategory_{subcategory_id}_{page + 1}"))
        if navigation_buttons:
            keyboard.append(navigation_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await query.message.reply_text("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=reply_markup)

    elif data[0] == "increase":
        product_id = int(data[1])
        logger.warning("—É–≤–µ–ª–∏—á–µ–Ω–æ")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        context.user_data[f"product_{product_id}_quantity"] = context.user_data.get(f"product_{product_id}_quantity",
                                                                                    1) + 1
        quantity = context.user_data[f"product_{product_id}_quantity"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        updated_keyboard = []
        for row in query.message.reply_markup.inline_keyboard:
            updated_row = []
            for button in row:
                if button.callback_data == f"quantity_{product_id}":
                    updated_row.append(InlineKeyboardButton(str(quantity), callback_data=button.callback_data))
                else:
                    updated_row.append(button)
            updated_keyboard.append(updated_row)

        reply_markup = InlineKeyboardMarkup(updated_keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)

    elif data[0] == "decrease":
        product_id = int(data[1])
        logger.warning("—É–º–µ–Ω—å—à–µ–Ω–æ")
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ 1)
        current_quantity = context.user_data.get(f"product_{product_id}_quantity", 1)
        if current_quantity > 1:
            context.user_data[f"product_{product_id}_quantity"] -= 1
            quantity = context.user_data[f"product_{product_id}_quantity"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            updated_keyboard = []
            for row in query.message.reply_markup.inline_keyboard:
                updated_row = []
                for button in row:
                    if button.callback_data == f"quantity_{product_id}":
                        updated_row.append(InlineKeyboardButton(str(quantity), callback_data=button.callback_data))
                    else:
                        updated_row.append(button)
                updated_keyboard.append(updated_row)

            reply_markup = InlineKeyboardMarkup(updated_keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)




    elif data[0] == "addtocart":

        product_id = int(data[1])

        quantity = context.user_data.get(f"product_{product_id}_quantity", 1)

        user_id = update.effective_user.id  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        connection = get_db_connection()

        cursor = connection.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã

        cursor.execute(

            """

            INSERT INTO cart (user_id, product_id, quantity)

            VALUES (%s, %s, %s)

            ON CONFLICT (user_id, product_id) DO UPDATE

            SET quantity = cart.quantity + EXCLUDED.quantity, updated_at = NOW();

            """,

            (user_id, product_id, quantity)

        )

        connection.commit()

        connection.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≥–∞–ª–æ—á–∫–æ–π
        await query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ", show_alert=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞

        current_reply_markup = query.message.reply_markup

        if current_reply_markup != query.message.reply_markup:
            await query.edit_message_reply_markup(reply_markup=current_reply_markup)



