import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from utils.db_helpers import get_db_connection
from handlers.cart_handler import add_to_cart, view_cart, handle_cart_callback, handle_delivery_data, initiate_payment, process_user_input
from handlers.catalog_handler import start_catalog, handle_callback
from handlers.start_handler import handle_start_callback
from handlers.faq_handler import inline_faq
from handlers.mailing_handler import schedule_mailing
from utils.logger import logger
from aiogram.types import Message
from utils.subscription_checker import require_subscription

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@require_subscription
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = get_db_connection()
    cursor = connection.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT id FROM telegram_users WHERE id = %s", (user_id,))
        user_exists = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not user_exists:
            cursor.execute("INSERT INTO telegram_users (id) VALUES (%s)", (user_id,))
            connection.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cursor.close()
        connection.close()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ üõí", callback_data="open_catalog"),
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask_question")
        ]
    ])
    await message.answer(
        text=(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "2. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ."
        ),
        reply_markup=keyboard
    )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    schedule_mailing(bot)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.message.register(start_catalog, Command("catalog"))
    dp.message.register(view_cart, Command("cart"))
    dp.message.register(inline_faq, Command("faq"))
    dp.message.register(process_user_input)
    dp.inline_query.register(inline_faq)

    dp.callback_query.register(handle_start_callback, lambda callback: callback.data in ["open_catalog", "ask_question"])
    dp.callback_query.register(add_to_cart, lambda callback: callback.data.startswith("product_"))
    dp.callback_query.register(handle_delivery_data, lambda callback: callback.data.startswith("start_delivery"))
    dp.callback_query.register(handle_cart_callback, lambda callback: callback.data.startswith("cart_"))
    dp.callback_query.register(handle_callback)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
