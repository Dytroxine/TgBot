import os
from utils.db_helpers import get_db_connection
from aiogram.types import Update
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from handlers.cart_handler import add_to_cart, view_cart, handle_cart_callback
from handlers.catalog_handler import start_catalog, handle_callback
from handlers.faq_handler import inline_faq
from handlers.start_handler import handle_start_callback
from handlers.mailing_handler import manual_mailing, send_mailing
from utils.logger import logger
from telegram.ext import InlineQueryHandler
from utils.subscription_checker import require_subscription
from handlers.cart_handler import handle_delivery_data



@require_subscription
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    user_id = update.effective_user.id
    connection = None
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        connection = get_db_connection()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        with connection.cursor() as cursor:
            # –í—Å—Ç–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É telegram_users, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç
            cursor.execute(
                """
                INSERT INTO telegram_users (id) 
                VALUES (%s) 
                ON CONFLICT (id) DO NOTHING;
                """,
                (user_id,)
            )
        connection.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if connection:
            connection.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ üõí", callback_data="open_catalog"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="ask_question")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –í—ã –º–æ–∂–µ—Ç–µ:\n"
             "1. –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.\n"
             "2. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ.",
        reply_markup=reply_markup
    )

def main():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    if not application.job_queue:
        application.job_queue = application.create_job_queue()


    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delivery_data))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("catalog", start_catalog))
    application.add_handler(CommandHandler("cart", view_cart))
    application.add_handler(CommandHandler("faq", inline_faq))
    application.add_handler(CommandHandler("send_mailing", manual_mailing))

    application.add_handler(InlineQueryHandler(inline_faq))

    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_start_callback, pattern="^open_catalog|ask_question$"))
    application.add_handler(CallbackQueryHandler(add_to_cart, pattern="^product_"))
    application.add_handler(CallbackQueryHandler(handle_cart_callback, pattern="^cart_"))
    application.add_handler(CallbackQueryHandler(handle_callback))  # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    application.job_queue.run_repeating(send_mailing, interval=40, first=10)

    application.run_polling()


if __name__ == '__main__':
    main()
